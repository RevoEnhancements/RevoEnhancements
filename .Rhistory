devtools::load_all(".")
install.packages("hexbin")
install.packages("hexbin")
devtools::load_all(".")
install.packages("devtools")
install.packages("devtools")
search()
devtools::load_all(".")
install.packages("mlbench")
library(RevoEnhancements)
sampleRXD <- function(iNRows = 1E4,
rxData = "work\split.TrainingValidation.T.xdf",
outFile = NULL){
iTotalRows <- rxGetInfo(rxData)$numRows
dPropData <- iNRows/iTotalRows
.e <- new.env(parent = baseenv())
assign("dPropData", dPropData, envir = .e)
sampleFunction <- function(datalist){
n <- length(datalist[[1]])
t <- round(n * dPropData)
tv <- rep(c(TRUE, FALSE), c(t, n-t))
datalist <- lapply(datalist, function(x){
x[tv]
})
datalist
}
rxDataStep(inData = rxData, outFile = outFile, transformFunc = sampleFunction)
}
sampleRXD <- function(iNRows = 1E4,
rxData = "work\split.TrainingValidation.T.xdf",
outFile = NULL){
iTotalRows <- rxGetInfo(rxData)$numRows
dPropData <- iNRows/iTotalRows
.e <- new.env(parent = baseenv())
assign("dPropData", dPropData, envir = .e)
sampleFunction <- function(datalist){
n <- length(datalist[[1]])
t <- round(n * dPropData)
tv <- rep(c(TRUE, FALSE), c(t, n-t))
datalist <- lapply(datalist, function(x){
x[tv]
})
datalist
}
rxDataStep(inData = rxData, outFile = outFile, transformFunc = sampleFunction)
}
sampleRXD <- function(iNRows = 1E4,
rxData = "work/split.TrainingValidation.T.xdf",
outFile = NULL){
iTotalRows <- rxGetInfo(rxData)$numRows
dPropData <- iNRows/iTotalRows
.e <- new.env(parent = baseenv())
assign("dPropData", dPropData, envir = .e)
sampleFunction <- function(datalist){
n <- length(datalist[[1]])
t <- round(n * dPropData)
tv <- rep(c(TRUE, FALSE), c(t, n-t))
datalist <- lapply(datalist, function(x){
x[tv]
})
datalist
}
rxDataStep(inData = rxData, outFile = outFile, transformFunc = sampleFunction)
}
?rxGlm
?rxGetOption
require(devtools)
rxLinPredError <- function (actualVarName, predVarName, data, sWeights = NULL, blocksPerRead = 1,
reportProgress = rxGetOption("reportProgress")) {
if(exists("data", mode = "list")){
numRow = nrow(data)
}else{
datInfo <- rxGetInfo(data)
numRow <- datInfo$numRows
}
.rxGet <- function() {}
.rxSet <- function() {}
rm(.rxGet, .rxSet)
BlockCompute <- function(datalist){
# Getting the data
dActualY <- datalist[[actualVarName]]
dPredY <- datalist[[predVarName]]
# Error
dError <- (dPredY - dActualY)
# Missing boolean
bMissing <- is.na(dError)
# Keeping only non-missing data
dError <- dError[!bMissing]
# Weights
if(is.null(sWeights)){
dWeights <- rep(1, length(dError))/numRow
}else{
dWeights <- datalist[[sWeights]]
}
dWeights <- dWeights[!bMissing]
dActualY <- dActualY[!bMissing]
# For MAPE
dSumABSPropError <- sum(abs(dError/dActualY))
# For MPE
dSumPropError <- sum(dError/dActualY)
# For RSS
RSS <- sum(dError^2)
# Weighted errors
dSumSQWeightedErrors <- sum(dWeights*(dError^2))
.rxSet("dSumABSPropError", .rxGet("dSumABSPropError") + dSumABSPropError)
.rxSet("dSumPropError", .rxGet("dSumPropError") + dSumPropError)
.rxSet("dSumWeights", .rxGet("dSumWeights") + sum(dWeights))
.rxSet("dSumSQWeightedErrors", .rxGet("dSumSQWeightedErrors") + dSumSQWeightedErrors)
.rxSet("RSS", .rxGet("RSS") + RSS)
.rxSet("N", .rxGet("N") + length(dError))
return(NULL)
}
ret <- rxDataStep(
inData = data,
varsToKeep = c(actualVarName, predVarName, sWeights),
blocksPerRead = blocksPerRead,
reportProgress = reportProgress,
returnTransformObjects = TRUE,
transformFunc = BlockCompute,
transformObjects = list(dSumABSPropError = 0, dSumPropError = 0, dSumWeights = 0,
dSumSQWeightedErrors = 0, RSS = 0, N = 0)
)
# Retreiving the values
dSumABSPropError <- ret[["dSumABSPropError"]]
dSumPropError <- ret[["dSumPropError"]]
dSumWeights <- ret[["dSumWeights"]]
dSumSQWeightedErrors <- ret[["dSumSQWeightedErrors"]]
RSS <- ret[["RSS"]]
N <- ret[["N"]]
MAPE <- dSumABSPropError/N
MPE <- dSumPropError/N
MSE <- RSS/N
MSWD <- (dSumSQWeightedErrors)*((N-1)*dSumWeights/N)
list(MAPE = MAPE, MPE = MPE, MSE = MSE, MSWD = MSWD)
}
fit <- rxLinMod(Sepal.Length ~ Petal.Length + Petal.Width, data = iris)
prd <- rxPredict(fit, iris)$Sepal.Length_Pred
dat <- data.frame(Sepal.Length=iris$Sepal.Length, Sepal.Length_Pred=prd, Weights = rep(1, nrow(iris))/nrow(iris))
rxLinPredError("Sepal.Length", "Sepal.Length_Pred", data=dat, sWeights="Weights")
rxLinPredError("Sepal.Length", "Sepal.Length_Pred", data=dat)
library(RevoEnhancements)
library(RevoEnhancements)
rxGetOption("sampleDataDir")
?rxDataStep
library(RevoEnhancements)
require(roxygenize)
require(roxygen)
require(roxygen2)
?roxygenize
getwd()
setwd("../")
getwd()
roxygenize("RevoEnhancements")
roxygenize("RevoEnhancements")
data = "work/split.TrainingValidation.T.xdf"
size = 1E6; replace = FALSE; maxRowsByCols = 220E6
extraRows <- 100
dataInfo <- rxGetInfo(data, getVarInfo = TRUE)
oneVar <- names(dataInfo$varInfo[1])
dataSize <- dataInfo$numRows
if (size > 1) {
p <- size / dataSize
} else if (size > 0) {
size <- ceiling(size * dataSize)
p <- size / dataSize
} else {
stop("'size' must be greater than zero")
}
if (is.data.frame(data)) {
mySamp <- sample.int(n = dataSize, size = size,
replace = ifelse(size > dataSize, TRUE, replace))
return(data[mySamp,])
}
createRandomSample <- function(dataList) {
# Trick to pass R CMD check: create and remove variables without binding
.rxStartRow <- .rxChunkNum <- function(){}
rm(.rxStartRow, .rxChunkNum)
zP <- character()
rm(zP)
numRows <- length(dataList[[1]])
dataList$.rxRowSelection <- as.logical(rbinom(numRows,1, zP))
return(dataList)
}
createRandomSampleReplace <- function(dataList) {
# Trick to pass R CMD check: create and remove variables without binding
.rxGet <- .rxSet <- .rxStartRow <- .rxChunkNum <- function() {}
rm(.rxGet, .rxSet, .rxStartRow, .rxChunkNum)
numRows <- length(dataList[[1]])
rowNum <- seq_len(numRows) + .rxStartRow - 1
rows <- sample[sample %in% rowNum]
tmpDf <- as.data.frame(dataList)[rows - .rxStartRow + 1,]
row.names(tmpDf) <- as.numeric(row.names(tmpDf)) + .rxStartRow - 1
ret[[.rxChunkNum]] <- tmpDf
.rxSet("ret", ret)
return(NULL)
}
replace
newP <- p + extraRows / dataSize
ret <- head(rxDataStep(data,
transformFunc = createRandomSample,
transformVars = oneVar,
transformObjects = list(zP = newP),
maxRowsByCols = maxRowsByCols),
n = size)
}
newP <- p + extraRows / dataSize
ret <- head(rxDataStep(data,
transformFunc = createRandomSample,
transformVars = oneVar,
transformObjects = list(zP = newP),
maxRowsByCols = maxRowsByCols),
n = size)
library(RevoEnhancements)
setwd("..\")
setwd("../")
require(roxygen)
require(roxygen2)
roxygenize("RevoEnhancements")
library(RevoEnhancements)
rxSample2Df
?rxDataStep
require(roxygen2)
setwd("..\")
setwd("../")
roxygenize("RevoScaleR")
roxygenize("RevoEnhancements")
args(rxFormula)
