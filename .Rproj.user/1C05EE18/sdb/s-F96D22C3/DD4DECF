{
    "contents" : "#\n# RevoEnhancements/R/rxLinPredError.R by Chibisi Chima-Okereke\n#\n# Copyright 2013 Revolution Analytics\n#    \n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n# \n#      http://www.apache.org/licenses/LICENSE-2.0\n# \n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, \n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n#' Calculates prediction error statistics for linear regression models.\n#' \n#' Calculates a number of error statistics, including:\n#' \\describe{\n#' \\item{MSE}{Mean squared error}\n#' \\item{MAPE}{Mean absolute percentage erorr}\n#' \\item{MPE}{Mean percentage error}\n#' \\item{MSWD}{Mean squared weighted deviation}\n#' }\n#'\n#' @param actualVarName String name of the response variable.\n#' @param predVarName String name of the predicted variable.\n#' @param sWeights String name of error weights.\n#' @param data data frame, or character string containing an '.xdf' file name (with path), or RxXdfData object representing an '.xdf' file containing the actual and observed variables.\n#' @param blocksPerRead number of blocks to read for each chunk of data read from the data source.\n#' @param reportProgress Passed to \\code{\\link{rxDataStep}}\n#' @return returns a list of prediction measures MSE, MAPE, MPE, MSWD \n#' @export\n#' @family Model summary statistics\n#' @examples\n#' library(RevoScaleR)\n#' \n#' ## Demonstrates calculation on data frame\n#' \n#' fit <- rxLinMod(Sepal.Length ~ Petal.Length + Petal.Width, data = iris)\n#' prd <- rxPredict(fit, iris)$Sepal.Length_Pred\n#' dat <- data.frame(Sepal.Length=iris$Sepal.Length, Sepal.Length_Pred=prd, Weights = rep(1, nrow(iris))/nrow(iris))\n#' rxLinPredError(\"Sepal.Length\", \"Sepal.Length_Pred\", data=dat, sWeights=\"Weights\")\n#' rxLinPredError(\"Sepal.Length\", \"Sepal.Length_Pred\", data=dat)\n\nrxLinPredError <- function (actualVarName, predVarName, data, sWeights = NULL, blocksPerRead = 1,\n                    reportProgress = rxGetOption(\"reportProgress\")) {\n  \n  if(exists(\"data\", mode = \"list\")){\n    numRow = nrow(data)\n  }else{\n    datInfo <- rxGetInfo(data)\n    numRow <- datInfo$numRows\n  }\n  \n  .rxGet <- function() {}\n  .rxSet <- function() {}\n  rm(.rxGet, .rxSet)\n  \n  BlockCompute <- function(datalist){\n    \n    # Getting the data\n    dActualY <- datalist[[actualVarName]]\n    dPredY <- datalist[[predVarName]]\n        \n    # Error\n    dError <- (dPredY - dActualY)\n    # Missing boolean\n    bMissing <- is.na(dError)\n    \n    # Keeping only non-missing data\n    dError <- dError[!bMissing]\n    \n    # Weights\n    if(is.null(sWeights)){\n      dWeights <- rep(1, length(dError))/numRow\n    }else{\n      dWeights <- datalist[[sWeights]]\n    }\n    \n    dWeights <- dWeights[!bMissing]\n    dActualY <- dActualY[!bMissing]\n    \n    # For MAPE\n    dSumABSPropError <- sum(abs(dError/dActualY))\n    # For MPE\n    dSumPropError <- sum(dError/dActualY)\n    # For RSS\n    RSS <- sum(dError^2)\n    \n    # Weighted errors\n    dSumSQWeightedErrors <- sum(dWeights*(dError^2))\n    \n    .rxSet(\"dSumABSPropError\", .rxGet(\"dSumABSPropError\") + dSumABSPropError)\n    .rxSet(\"dSumPropError\", .rxGet(\"dSumPropError\") + dSumPropError)\n    .rxSet(\"dSumWeights\", .rxGet(\"dSumWeights\") + sum(dWeights))\n    .rxSet(\"dSumSQWeightedErrors\", .rxGet(\"dSumSQWeightedErrors\") + dSumSQWeightedErrors)\n    .rxSet(\"RSS\", .rxGet(\"RSS\") + RSS)\n    .rxSet(\"N\", .rxGet(\"N\") + length(dError))\n    \n    return(NULL)\n  }\n  \n  ret <- rxDataStep(\n    inData = data, \n    varsToKeep = c(actualVarName, predVarName, sWeights), \n    blocksPerRead = blocksPerRead, \n    reportProgress = reportProgress, \n    returnTransformObjects = TRUE, \n    transformFunc = BlockCompute, \n    transformObjects = list(dSumABSPropError = 0, dSumPropError = 0, dSumWeights = 0,\n                            dSumSQWeightedErrors = 0, RSS = 0, N = 0)\n  )\n  \n  # Retreiving the values\n  dSumABSPropError <- ret[[\"dSumABSPropError\"]]\n  dSumPropError <- ret[[\"dSumPropError\"]]\n  dSumWeights <- ret[[\"dSumWeights\"]]\n  dSumSQWeightedErrors <- ret[[\"dSumSQWeightedErrors\"]]\n  RSS <- ret[[\"RSS\"]]\n  N <- ret[[\"N\"]]\n  \n  \n  MAPE <- dSumABSPropError/N\n  MPE <- dSumPropError/N\n  MSE <- RSS/N\n  MSWD <- (dSumSQWeightedErrors)*((N-1)*dSumWeights/N)\n  \n  list(MAPE = MAPE, MPE = MPE, MSE = MSE, MSWD = MSWD)\n}\n\n",
    "created" : 1377854770696.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1236684529",
    "id" : "DD4DECF",
    "lastKnownWriteTime" : 1377847335,
    "path" : "~/GitHub/RevoEnhancements/R/rxLinPredError.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}