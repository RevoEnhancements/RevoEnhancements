{
    "contents" : "#\n# RevoEnhancements/R/rxSample.R by Derek Norton and Andrie de Vries\n#\n# Copyright 2013 Revolution Analytics\n#    \n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n# \n#      http://www.apache.org/licenses/LICENSE-2.0\n# \n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, \n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n#' Function to sample, with or without replacement, from an XDF to a data frame.\n#' \n#' @param data xdf File\n#' @param size Number of rows to sample\n#' @param replace If TRUE, samples with replacement.  Passed to \\code{\\link{sample.int}}\n#' @param maxRowsByCols the maximum number of rows x columns as specified by rxDataStep\n#' @export\n#' @return A data frame\n#' @family Data mining functions\n#' @examples\n#' library(RevoScaleR)\n#' xdfFile <- file.path(rxGetOption(\"sampleDataDir\"), \"CensusWorkers.xdf\")\n#' df <- rxSample2Df(xdfFile, size = 10000, replace = FALSE)\n#' df <- rxSample2Df(xdfFile, size = 10000, replace = TRUE)\nrxSample2Df <- function(data, size, replace = FALSE, maxRowsByCols = 3E6) {\n  extraRows <- 100\n  dataInfo <- rxGetInfo(data, getVarInfo = TRUE)\n  oneVar <- names(dataInfo$varInfo[1])\n  dataSize <- dataInfo$numRows\n  if (size > 1) {\n    p <- size / dataSize \n  } else if (size > 0) {\n    size <- ceiling(size * dataSize)\n    p <- size / dataSize\n  } else {\n    stop(\"'size' must be greater than zero\")\n  }\n  if (is.data.frame(data)) {\n    mySamp <- sample.int(n = dataSize, size = size, \n                         replace = ifelse(size > dataSize, TRUE, replace))\n    return(data[mySamp,])\n  }\n  createRandomSample <- function(dataList) {\n    # Trick to pass R CMD check: create and remove variables without binding\n    .rxStartRow <- .rxChunkNum <- function(){}\n    rm(.rxStartRow, .rxChunkNum)\n    zP <- character()\n    rm(zP)\n    \n    numRows <- length(dataList[[1]])\n    dataList$.rxRowSelection <- as.logical(rbinom(numRows,1, zP))\n    return(dataList)\n  }\n  createRandomSampleReplace <- function(dataList) {\n    # Trick to pass R CMD check: create and remove variables without binding\n    .rxGet <- .rxSet <- .rxStartRow <- .rxChunkNum <- function() {}\n    rm(.rxGet, .rxSet, .rxStartRow, .rxChunkNum)\n    \n    numRows <- length(dataList[[1]])\n    rowNum <- seq_len(numRows) + .rxStartRow - 1 \n    rows <- sample[sample %in% rowNum]\n    tmpDf <- as.data.frame(dataList)[rows - .rxStartRow + 1,]\n    row.names(tmpDf) <- as.numeric(row.names(tmpDf)) + .rxStartRow - 1 \n    ret[[.rxChunkNum]] <- tmpDf\n    .rxSet(\"ret\", ret)\n    return(NULL)\n  }\n  if (replace) {\n    mySamp <- sample.int(dataSize, size = size, replace = replace)\n    ret <- rxDataStep(data, \n                      transformFunc = createRandomSampleReplace,\n                      transformObjects = list(sample = mySamp, ret = list()),\n                      returnTransformObjects = TRUE, maxRowsByCols = maxRowsByCols)\n    ret <- do.call(rbind, ret$ret)\n  } else {\n    newP <- p + extraRows / dataSize\n    ret <- head(rxDataStep(data, \n                           transformFunc = createRandomSample,\n                           transformVars = oneVar, \n                           transformObjects = list(zP = newP),\n                           maxRowsByCols = maxRowsByCols), \n                n = size)\n  }\n  return(ret)\n}\n\n",
    "created" : 1377848616134.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "88026942",
    "id" : "6A924DA5",
    "lastKnownWriteTime" : 1377850999,
    "path" : "~/GitHub/RevoEnhancements/R/rxSample.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}